[{"title":"Vim使用笔记","date":"2016-06-14T16:00:00.000Z","path":"2016/06/15/vim/","text":"1. 光標在屏幕文本中的移動既可以用箭頭鍵，也可以使用 hjkl 字母鍵。 h (左移) j (下行) k (上行) l (右移) 2. 欲進入vim編輯器(從命令行提示符)，請輸入︰vim 文件名 3. 欲退出vim編輯器，請輸入以下命令放棄所有修改︰ :q! 或者輸入以下命令保存所有修改︰ :wq 4. 在正常模式下刪除光標所在位置的字符，請按︰ x 5. 欲從當前光標刪除至單字/單詞末尾，請輸入︰dw 6. 欲從當前光標刪除至當前行末尾，請輸入︰d$ 7. 欲刪除整行，請輸入︰dd 2dd 删除2行 8、撤销：u 9、反撤销：ctr+r 10、要重新置入已經刪除的文本內容，請輸入小寫字母 p。該操作可以將已刪除 的文本內容置于光標之後。如果最後一次刪除的是一個整行，那麼該行將置 于當前光標所在行的下一行。 11、 要替換光標所在位置的字符，請輸入小寫的 r 和要替換掉原位置字符的新字 符即可。 12. 更改類命令允許您改變指定的對象，從當前光標所在位置直到對象的末尾。 比如輸入 cw 可以替換當前光標到單詞的末尾的內容；輸入 c$ 可以替換當 前光標到行末的內容。 13、 Ctrl-g 用于顯示當前光標所在位置和文件狀態信息。Shift-G 用于將光標跳 轉至文件最後一行。先敲入一個行號然後按 Shift-G 則是將光標移動至該行 號代表的行。 14、 輸入 / 然後緊隨一個字符串是則是在當前所編輯的文檔中向後查找該字符串。 輸入問號 ? 然後緊隨一個字符串是則是在當前所編輯的文檔中向前查找該字 符串。完成一次查找之後按 n 鍵則是重復上一次的命令，可在同一方向上查 找下一個字符串所在；或者按 Shift-N 向相反方向查找下該字符串所在。 15、 如果光標當前位置是括號(、)、[、]、{、}，按 % 可以將光標移動到配對的 括號上。 16、：输入命令，！执行外部shell命令 :!pwd 表示列出当前路径 17、","tags":[{"name":"code","slug":"code","permalink":"http://leacent.github.io/tags/code/"}]},{"title":"前端知识碎片","date":"2016-03-15T06:16:28.000Z","path":"2016/03/15/前端知识碎片/","text":"传值还是引用1、传值传内存拷贝不会改变引用的值2、传引用是传内存指针 1234567891011121314151617181920212223function changeStuff(num, obj1, obj2)&#123; num = num * 10; obj1.item = \"changed\"; obj2 = &#123;item: \"changed\"&#125;;&#125;var num = 10;var obj1 = &#123;item: \"unchanged\"&#125;;var obj2 = &#123;item: \"unchanged\"&#125;;changeStuff(num, obj1, obj2);console.log(num); // 10console.log(obj1.item); // changedconsole.log(obj2.item); // unchanged//解释function changeStuff(num, obj1, obj2)&#123; num = num * 10; // 对num赋值，修改num的指向，新内存的内容为old_num * 10 obj1.item = \"changed\"; // 修改原始obj1内存中的内容 obj2 = &#123;item: \"changed\"&#125;; // 对obj2赋值，修改obj2指向，新内存的内容为&#123;item: \"changed\"&#125;&#125; 写维护性的JavaScript代码1、封装JavaScript123(function()&#123; // somecode goes here&#125;)() 2、nameSpace1234myAppNamespace = &#123; attr1: &quot;val1&quot;, attr2: &quot;val2&quot;&#125;; 3、modular pattern123456789101112131415var modularpattern = (function() &#123; // your module code goes here var sum = 0 ; return &#123; add:function() &#123; sum = sum + 1; return sum; &#125;, reset:function() &#123; return sum = 0; &#125; &#125;&#125;());alert(modularpattern.add()); // alerts: 1 闭包原型和原型链12345678var o = &#123;a:1,b:2&#125; // 定义一个对象var oParent = o.__proto__ // 这个为对象o的原型oParent.b = 3;oParent.c = 4;// 原型链为：&#123;a:1, b:2&#125; ---&gt; &#123;b:3, c:4&#125; ---&gt; null 原型继承12345678910var Parent = &#123; a:1, b: function()&#123; alert(this.a) &#125;&#125;var Children = Object.create(Parent)Children.a = \"123\"Children.b() // alert a is 123 // 当继承函数被调用时候，this指向当前继承对象，而不是原型 用普通语法创建对象1234567891011var o = &#123; a: 1&#125;o.hasOwnProperty('a') // true// 普通创建对象时候，o继承了Object.prototype上面的所有属性// 所以o拥有hasOwnProperty等属性// 原型链如下// o ---&gt; Object.prototype ---&gt; nullvar arr = ['LOL']// 数组都继承Array.prototype 构造函数创建对象1234function Obfn()&#123; this.name = 'leacent'&#125;var ob = new Obfn() Object.create创建对象12var a = &#123;name:'leacent'&#125;var b = Object.create(a) Class创建对象123456789101112class Parent &#123; constructor(name,age)&#123; this.name = 'lea' this.age = 25 &#125;&#125;class Child extends Parent &#123; constructor()&#123; super() &#125;&#125;var p = new Child() // Child &#123;name: \"lea\", age: 25&#125; 内存生命周期 1、分配所需要的内存 2、使用分配到的内存 3、不需要时释放/归还 JavaScript在定义变量时候完成了内存分配var n = 123 // 给数值变量分配内存var s = ‘asdd’ // 给字符串分配内存var o = { name:’lea’} // 给对象分配内存var arr = [1,2,3] // 给数组分配内存 页面重排与重绘1、解析HTML以构建DOM树: 渲染引擎解析HTML生成标签DOM节点 。称为内容树。 2、构建渲染树： 解析CSS、包括js生成的样式，创建渲染树 3、计算DOM节点的位置、大小。 4、根据渲染树绘制页面 引起页面重排和重绘1、直接操作DOM，比如增加、修改DOM节点会导致重排和重绘 2、移动和改变DOM位置 3、修改样式 4、resize窗口 5、修改默认字体 优化1、避免直接修改DOM，而是修改className 2、少用table布局（table布局容易因为小的改动而导致重新布局） 3、为动画加上position：absolute/fixed属性减少重绘 4、尽可能修改层级低的dom节点 5、如果要直接操作DOM，缓存要操作的DOM节点","tags":[{"name":"code","slug":"code","permalink":"http://leacent.github.io/tags/code/"}]},{"title":"迷之思考","date":"2012-11-22T16:07:00.000Z","path":"2012/11/23/迷之思考/","text":"这个人看起来好像实现了梦想，那个人又好像坚持了自己喜欢的路，都不错的样子。回想一下自己以前的梦想，仿佛自己越走越远，走上另一条未知的路。 对朋友所走的路表示很羡慕欣赏，毕竟我也是跟他们那样，许过同样的愿望想着去实现差不多的理想，他们坚持了最初的梦想，我却偏离了。我很迷茫，我并不是对自己现在的路感觉不好，我无法评价自己的人生， 因为我无法拿上辈子作比较，也无法拿来生加以修正，人生的一次性是我迷茫的根本原因。 如果我上辈子活过，而且保留了记忆，那我就知道这辈子该怎样避免犯错了吗？就能清楚知道自己想要的未来吗？或者说下辈子我还可以再活一次，我选择另一条路，就能解决上辈子的迷茫了吗？ 人只能活一次否定了这些设想。这些想法很奇怪，米兰.昆德拉把我引入无限的思考之中。 其实，人对未来的迷茫源于生命的本质特征——那就是生命只有一次。 这样看来我似乎没必要为了未来而迷茫担忧， 因为我即将做的决定没有人知道对错，我现在所坚持的梦想，我并没有上辈子的经验来对今生的梦想做一个判定。","tags":[{"name":"life","slug":"life","permalink":"http://leacent.github.io/tags/life/"}]},{"title":"杂语碎录","date":"2010-09-18T16:00:00.000Z","path":"2010/09/19/年轻的思考/","text":"我愿意思索，我也时常思索。纵使知道通过思索来明白人生是一件徒劳的事，我还是愿意思索。我很糊涂，但有些事我要试图找一个说法，或者是一个借口。遇到困难退缩时，人人都需要给自己一个说法来面对。学着长大是个说法，也是一个借口，因为直面挫折不需要理由。伟大的哲理有着隐蔽的借口，而且有着高效的说服力。 诗和爱情一样美丽。我愿用诗来歌颂我的爱情，我愿意从我的爱情中提取诗意。她们自然，曼妙地飞舞，于尘世上空泼洒着美丽，人们在下面欢呼追求。和熙的眼光是载体，温暖的爱意是信息。她们像阳光一样亲吻着我的脸，* 拥抱着我的身体，温暖着我的心。 他们指责我不实际，说那不能当饭吃。我说能，因为那是精神的粮食，不吃就会脑残，得少年痴呆！ 我爱中国的王维，苏东坡，爱外国的雪莱，泰戈尔。因为他们给了我奇特的想象力，我经常跟他们的想象力聚在一起，而“想象力”也经常带着我到处遨游，去许多人去不了的地方。 我讨厌循规蹈矩，讨厌木讷固执。我讨厌他们以一副悔人不倦的态度教我以浅薄平庸的知识。讨厌社会以一种无可奈何的态度告诉我它的阴暗。讨厌的东西很多，但厌世的心理不会有，因为我还要更加入世把这个红尘搞得天翻地覆。我要活得深刻，在尘世中深深地刻下我的痕迹，不让历史掩埋掉。 读懂我的心，但请别把我看透。 可怜的自尊啊！我过度的看重你保护你，为你放弃强大而变得软弱！软弱之后你这“家伙”会不会回过头来讥笑我呢？ 一个“自尊”过剩，“自信”不良的家伙。","tags":[{"name":"life","slug":"life","permalink":"http://leacent.github.io/tags/life/"}]}]